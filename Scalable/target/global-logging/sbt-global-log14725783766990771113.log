[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\giovi\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\giovi\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 13.0.1)
[debug]       Load.loadUnit: plugins took 316.684ms
[debug]       Load.loadUnit: defsScala took 0.5122ms
[debug] [Loading] Scanning directory C:\Users\giovi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\giovi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 49.7436 ms
[debug]           Load.resolveProject(global-plugins) took 100.1649ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\giovi\.sbt\1.0\plugins, plugins: List(<none>))) took 208.8771ms
[debug] [Loading] Done in C:\Users\giovi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 251.3733ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4916ms
[debug]     Load.loadUnit(file:/C:/Users/giovi/.sbt/1.0/plugins/, ...) took 585.3788ms
[debug]   Load.apply: load took 1652.2771ms
[debug]   Load.apply: resolveProjects took 59.6012ms
[debug]   Load.apply: finalTransforms took 494.7324ms
[debug]   Load.apply: config.delegates took 14.681ms
[debug]   Load.apply: Def.make(settings)... took 1568.4239ms
[debug]   Load.apply: structureIndex took 536.2857ms
[debug]   Load.apply: mkStreams took 2.1427ms
[info] loading global plugins from C:\Users\giovi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 19721.9778ms
[debug]           Load.loadUnit: plugins took 536.428ms
[debug]           Load.loadUnit: defsScala took 0.0162ms
[debug] [Loading] Scanning directory C:\Users\giovi\Documents\GitHub\Scalability-project\Scalable\project
[debug]             Load.loadUnit: mkEval took 90.3516ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\giovi\Documents\GitHub\Scalability-project\Scalable\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.0903 ms
[info] loading settings for project scalable-build from idea.sbt ...
[debug]               Load.resolveProject(scalable-build) took 8.1369ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalable-build, base: C:\Users\giovi\Documents\GitHub\Scalability-project\Scalable\project, plugins: List(<none>))) took 12.0539ms
[debug] [Loading] Done in C:\Users\giovi\Documents\GitHub\Scalability-project\Scalable\project, returning: (scalable-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 10692.7349ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.2507ms
[debug]         Load.loadUnit(file:/C:/Users/giovi/Documents/GitHub/Scalability-project/Scalable/project/, ...) took 11268.8504ms
[debug]       Load.apply: load took 11285.9866ms
[debug]       Load.apply: resolveProjects took 0.1659ms
[debug]       Load.apply: finalTransforms took 50.6514ms
[debug]       Load.apply: config.delegates took 0.6625ms
[debug]       Load.apply: Def.make(settings)... took 421.2774ms
[debug]       Load.apply: structureIndex took 149.2818ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\giovi\Documents\GitHub\Scalability-project\Scalable\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 17133.0951ms
[debug]     Load.loadUnit: defsScala took 0.0046ms
[debug] [Loading] Scanning directory C:\Users\giovi\Documents\GitHub\Scalability-project\Scalable
[debug]       Load.loadUnit: mkEval took 0.4209ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.3116 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 154.9079ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\giovi\Documents\GitHub\Scalability-project\Scalable, plugins: List(<none>))) took 164.912ms
[debug] [Loading] Done in C:\Users\giovi\Documents\GitHub\Scalability-project\Scalable, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 6197.7559ms
[debug]     Load.loadUnit: cleanEvalClasses took 149.793ms
[debug]   Load.loadUnit(file:/C:/Users/giovi/Documents/GitHub/Scalability-project/Scalable/, ...) took 23482.4034ms
[debug] Load.apply: load took 23687.5688ms
[debug] Load.apply: resolveProjects took 0.152ms
[debug] Load.apply: finalTransforms took 85.6868ms
[debug] Load.apply: config.delegates took 0.7695ms
[debug] Load.apply: Def.make(settings)... took 335.1016ms
[debug] Load.apply: structureIndex took 55.5223ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to Scalable (in build file:/C:/Users/giovi/Documents/GitHub/Scalability-project/Scalable/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55064 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55064, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scalable (in build file:/C:/Users/giovi/Documents/GitHub/Scalability-project/Scalable/)
[debug] > Exec(idea-shell, None, None)
